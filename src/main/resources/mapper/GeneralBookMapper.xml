<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.heng.reading.apiservice.mapper.GeneralBookMapper">
  <resultMap id="BaseResultMap" type="com.heng.reading.apiservice.entity.GeneralBook">
    <!--@mbg.generated-->
    <!--@Table general_book-->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="book_title" jdbcType="VARCHAR" property="bookTitle" />
    <result column="book_authors" jdbcType="VARCHAR" property="bookAuthors" />
    <result column="book_description" jdbcType="LONGVARCHAR" property="bookDescription" />
    <result column="book_cover_url" jdbcType="VARCHAR" property="bookCoverUrl" />
    <result column="book_size" jdbcType="VARCHAR" property="bookSize" />
    <result column="book_pushed_time" jdbcType="VARCHAR" property="bookPushedTime" />
    <result column="book_file_url" jdbcType="VARCHAR" property="bookFileUrl" />
    <result column="book_opf_url" jdbcType="VARCHAR" property="bookOpfUrl" />
    <result column="book_unpacked_dir_url" jdbcType="VARCHAR" property="bookUnpackedDirUrl" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, book_title, book_authors, book_description, book_cover_url, book_size, book_pushed_time, 
    book_file_url, book_opf_url, book_unpacked_dir_url
  </sql>

  <select id="queryBookSimpleById" parameterType="java.lang.String" resultType="com.heng.reading.apiservice.dto.book.GeneralBookSimpleDto">
    SELECT id, book_title, book_authors, book_cover_url, book_opf_url
    FROM general_book
    WHERE id = #{bookId}
  </select>

  <select id="queryBooksByAccountId" parameterType="java.lang.String" resultType="com.heng.reading.apiservice.dto.book.GeneralBookDto">
    SELECT id, book_title, book_authors, book_description, book_size, book_pushed_time, book_cover_url, book_file_url, book_opf_url
    FROM general_book WHERE id in (
        SELECT book_id FROM account_book_index WHERE account_id = #{accountId}
    )
  </select>

  <select id="queryBooksSimpleByAccountId" parameterType="java.lang.String" resultType="com.heng.reading.apiservice.dto.book.GeneralBookSimpleDto">
    SELECT id, book_title, book_authors, book_cover_url, book_opf_url
    FROM general_book WHERE id in (
            SELECT book_id FROM account_book_index WHERE account_id = #{accountId}
    )
  </select>

  <select id="queryBookByAccountIdWithTitleLikeOrAuthorsLike" parameterType="java.lang.String" resultType="com.heng.reading.apiservice.dto.book.GeneralBookDto">
    SELECT id, book_title, book_authors, book_description, book_size, book_pushed_time, book_cover_url, book_file_url, book_opf_url
    FROM general_book
    WHERE id IN (SELECT book_id FROM account_book_index WHERE account_id = #{accountId})
    <if test='titleLike != null and titleLike != ""'>
      AND book_title LIKE '%' #{titleLike} '%'
    </if>
    <if test='authorLike != null and authorLike != ""'>
      AND book_authors LIKE '%' #{authorLike} '%'
    </if>
  </select>

  <select id="queryBooksSimpleByAccountIdWithTitleLikeOrAuthorsLike" parameterType="java.lang.String" resultType="com.heng.reading.apiservice.dto.book.GeneralBookSimpleDto">
    SELECT id, book_title, book_authors, book_cover_url, book_opf_url
    FROM general_book
    WHERE id IN (SELECT book_id FROM account_book_index WHERE account_id = #{accountId})
    <if test='titleLike != null and titleLike != ""'>
      AND book_title LIKE '%' #{titleLike} '%'
    </if>
    <if test='authorLike != null and authorLike != ""'>
      AND book_authors LIKE '%' #{authorLike} '%'
    </if>
  </select>

  <select id="checkBookExistedById" resultType="java.lang.Integer">
    SELECT COUNT(id) as res FROM general_book WHERE id = #{bookId} limit 1
  </select>
</mapper>